
varying vec2 v_texCoord;
uniform vec2 resolution;
uniform sampler2D texture;
uniform float time;
const float radius = 10.0;
const vec3 glowColor =vec3(1.0, 1.0, 0.0);
float coefficient()
{
	float v = mod(time, 3.0);
    if(v > 1.5)
        v = 3.0 - v;
    return v;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord ){
    vec2 uv = fragCoord.xy / resolution.xy;
    vec2 unit = 1.0 / resolution.xy;
    vec4 texel = texture2D(texture,vec2(v_texCoord.xy));
    vec4 finalColor = vec4(0.0);
    float density =0.0;
    if(texel.a > 1.0){
       finalColor = vec4(texel.rgb,1);
    }
    else{
        for(int i = 0; i < int(radius); ++i){
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;
        }
        finalColor = vec4(texel.rgb * texel.a, texel.a);

        //finalColor = coefficient() *density *vec4(glowColor * density / radius , 1.0);

    }
	fragColor = finalColor;
}
void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
